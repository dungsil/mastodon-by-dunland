{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/subscribed_languages_modal/index.js"],"names":["messages","defineMessages","close","getAccountLanguages","createSelector","state","accountId","getIn","ImmutableList","get","statusIds","statuses","ImmutableSet","map","statusId","filter","status","SubscribedLanguagesModal","connect","acct","availableLanguages","selectedLanguages","dispatch","onSubmit","languages","followAccount","injectIntl","ImmutablePureComponent","this","props","handleLanguageToggle","value","checked","setState","add","delete","handleSubmit","toArray","onClose","renderItem","language","find","includes","name","label","onToggle","multiple","render","intl","className","title","formatMessage","icon","onClick","size","id","defaultMessage","values","target","union","disabled","is","propTypes","PropTypes","string","isRequired","ImmutablePropTypes","setOf","func","arrayOf","object","submit","defaultProps","preloadedLanguages"],"mappings":"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","file":"js/modals/subscribed_languages_modal-4166ad9b56167804a4b2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { is, List as ImmutableList, Set as ImmutableSet } from 'immutable';\nimport { languages as preloadedLanguages } from 'mastodon/initial_state';\nimport Option from 'mastodon/features/report/components/option';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport IconButton from 'mastodon/components/icon_button';\nimport Button from 'mastodon/components/button';\nimport { followAccount } from 'mastodon/actions/accounts';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst getAccountLanguages = createSelector([\n  (state, accountId) => state.getIn(['timelines', `account:${accountId}`, 'items'], ImmutableList()),\n  state => state.get('statuses'),\n], (statusIds, statuses) =>\n  new ImmutableSet(statusIds.map(statusId => statuses.get(statusId)).filter(status => !status.get('reblog')).map(status => status.get('language'))));\n\nconst mapStateToProps = (state, { accountId }) => ({\n  acct: state.getIn(['accounts', accountId, 'acct']),\n  availableLanguages: getAccountLanguages(state, accountId),\n  selectedLanguages: ImmutableSet(state.getIn(['relationships', accountId, 'languages']) || ImmutableList()),\n});\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n\n  onSubmit (languages) {\n    dispatch(followAccount(accountId, { languages }));\n  },\n\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass SubscribedLanguagesModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    acct: PropTypes.string.isRequired,\n    availableLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    selectedLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    onClose: PropTypes.func.isRequired,\n    languages: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n    intl: PropTypes.object.isRequired,\n    submit: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    languages: preloadedLanguages,\n  };\n\n  state = {\n    selectedLanguages: this.props.selectedLanguages,\n  };\n\n  handleLanguageToggle = (value, checked) => {\n    const { selectedLanguages } = this.state;\n\n    if (checked) {\n      this.setState({ selectedLanguages: selectedLanguages.add(value) });\n    } else {\n      this.setState({ selectedLanguages: selectedLanguages.delete(value) });\n    }\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.selectedLanguages.toArray());\n    this.props.onClose();\n  }\n\n  renderItem (value) {\n    const language = this.props.languages.find(language => language[0] === value);\n    const checked = this.state.selectedLanguages.includes(value);\n\n    if (!language) {\n      return null;\n    }\n\n    return (\n      <Option\n        key={value}\n        name='languages'\n        value={value}\n        label={language[1]}\n        checked={checked}\n        onToggle={this.handleLanguageToggle}\n        multiple\n      />\n    );\n  }\n\n  render () {\n    const { acct, availableLanguages, selectedLanguages, intl, onClose } = this.props;\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={20} />\n          <FormattedMessage id='subscribed_languages.target' defaultMessage='Change subscribed languages for {target}' values={{ target: <strong>{acct}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='subscribed_languages.lead' defaultMessage='Only posts in selected languages will appear on your home and list timelines after the change. Select none to receive posts in all languages.' /></p>\n\n          <div>\n            {availableLanguages.union(selectedLanguages).delete(null).map(value => this.renderItem(value))}\n          </div>\n\n          <div className='flex-spacer' />\n\n          <div className='report-dialog-modal__actions'>\n            <Button disabled={is(this.state.selectedLanguages, this.props.selectedLanguages)} onClick={this.handleSubmit}><FormattedMessage id='subscribed_languages.save' defaultMessage='Save changes' /></Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}