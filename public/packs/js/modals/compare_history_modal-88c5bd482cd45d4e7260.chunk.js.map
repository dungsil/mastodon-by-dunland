{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/ui/components/compare_history_modal.js"],"names":["CompareHistoryModal","connect","state","statusId","versions","getIn","dispatch","onClose","closeModal","React","PureComponent","render","index","this","props","currentVersion","get","emojiMap","reduce","obj","emoji","toJS","content","__html","emojify","spoilerContent","escapeTextContentForBrowser","formattedDate","timestamp","short","formattedName","accountId","label","id","defaultMessage","values","name","date","className","icon","onClick","size","length","Fragment","dangerouslySetInnerHTML","map","option","status"],"mappings":"0PAuBG,IAGGA,EADUC,mBAZQ,CAACC,EAAM,KAAD,IAAE,SAAEC,GAAU,QAAM,CAChDC,SAAUF,EAAMG,MAAM,CAAC,UAAWF,EAAU,cAGnBG,IAAQ,CAEjCC,UACED,EAASE,mBAK+C,GAA7C,cACmBC,IAAMC,cAStCC,SACE,MAAM,MAAEC,EAAK,SAAER,EAAQ,QAAEG,GAAYM,KAAKC,MACpCC,EAAiBX,EAASY,IAAIJ,GAE9BK,EAAWF,EAAeC,IAAI,UAAUE,QAAO,CAACC,EAAKC,KACzDD,EAAK,IAAGC,EAAMJ,IAAI,iBAAmBI,EAAMC,OACpCF,IACN,IAEGG,EAAU,CAAEC,OAAQC,kBAAQT,EAAeC,IAAI,WAAYC,IAC3DQ,EAAiB,CAAEF,OAAQC,kBAAQE,IAA4BX,EAAeC,IAAI,iBAAkBC,IAEpGU,EAAgB,YAAC,UAAiB,CAACC,UAAWb,EAAeC,IAAI,cAAea,OAAO,IACvFC,EAAgB,YAAC,IAAa,CAACC,UAAWhB,EAAeC,IAAI,aAE7DgB,EAAQjB,EAAeC,IAAI,YAC/B,YAAC,IAAgB,CAACiB,GAAG,yBAAyBC,eAAe,wBAAwBC,OAAQ,CAAEC,KAAMN,EAAeO,KAAMV,KAE1H,YAAC,IAAgB,CAACM,GAAG,wBAAwBC,eAAe,uBAAuBC,OAAQ,CAAEC,KAAMN,EAAeO,KAAMV,KAG1H,OACE,mBAAKW,UAAU,gDAAyC,EACtD,mBAAKA,UAAU,6BAAsB,EACnC,YAAC,IAAU,CAACA,UAAU,sBAAsBC,KAAK,QAAQC,QAASjC,EAASkC,KAAM,KAChFT,GAGH,mBAAKM,UAAU,yCAAkC,EAC/C,mBAAKA,UAAU,wBAAiB,EAC7BvB,EAAeC,IAAI,gBAAgB0B,OAAS,GAC3C,YAAC,IAAMC,SAAQ,UACb,mBAAKL,UAAU,YAAYM,wBAAyBnB,IACpD,sBAIJ,mBAAKa,UAAU,iEAAiEM,wBAAyBtB,MAEtGP,EAAeC,IAAI,SACpB,mBAAKsB,UAAU,aAAM,EACnB,2BACGvB,EAAeV,MAAM,CAAC,OAAQ,YAAYwC,KAAIC,GAC7C,oBAASA,EAAO9B,IAAI,SAClB,oBAAMsB,UAAU,yBAEhB,oBACEA,UAAU,+BACVM,wBAAyB,CAAErB,OAAQC,kBAAQE,IAA4BoB,EAAO9B,IAAI,UAAWC,WAQzG,YAAC,IAAgB,CAAC8B,OAAQhC,WAOrC","file":"js/modals/compare_history_modal-88c5bd482cd45d4e7260.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { closeModal } from 'mastodon/actions/modal';\nimport emojify from 'mastodon/features/emoji/emoji';\nimport escapeTextContentForBrowser from 'escape-html';\nimport InlineAccount from 'mastodon/components/inline_account';\nimport IconButton from 'mastodon/components/icon_button';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\nimport MediaAttachments from 'mastodon/components/media_attachments';\n\nconst mapStateToProps = (state, { statusId }) => ({\n  versions: state.getIn(['history', statusId, 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onClose() {\n    dispatch(closeModal());\n  },\n\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\nclass CompareHistoryModal extends React.PureComponent {\n\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    statusId: PropTypes.string.isRequired,\n    versions: ImmutablePropTypes.list.isRequired,\n  };\n\n  render () {\n    const { index, versions, onClose } = this.props;\n    const currentVersion = versions.get(index);\n\n    const emojiMap = currentVersion.get('emojis').reduce((obj, emoji) => {\n      obj[`:${emoji.get('shortcode')}:`] = emoji.toJS();\n      return obj;\n    }, {});\n\n    const content = { __html: emojify(currentVersion.get('content'), emojiMap) };\n    const spoilerContent = { __html: emojify(escapeTextContentForBrowser(currentVersion.get('spoiler_text')), emojiMap) };\n\n    const formattedDate = <RelativeTimestamp timestamp={currentVersion.get('created_at')} short={false} />;\n    const formattedName = <InlineAccount accountId={currentVersion.get('account')} />;\n\n    const label = currentVersion.get('original') ? (\n      <FormattedMessage id='status.history.created' defaultMessage='{name} created {date}' values={{ name: formattedName, date: formattedDate }} />\n    ) : (\n      <FormattedMessage id='status.history.edited' defaultMessage='{name} edited {date}' values={{ name: formattedName, date: formattedDate }} />\n    );\n\n    return (\n      <div className='modal-root__modal compare-history-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' icon='times' onClick={onClose} size={20} />\n          {label}\n        </div>\n\n        <div className='compare-history-modal__container'>\n          <div className='status__content'>\n            {currentVersion.get('spoiler_text').length > 0 && (\n              <React.Fragment>\n                <div className='translate' dangerouslySetInnerHTML={spoilerContent} />\n                <hr />\n              </React.Fragment>\n            )}\n\n            <div className='status__content__text status__content__text--visible translate' dangerouslySetInnerHTML={content} />\n\n            {!!currentVersion.get('poll') && (\n              <div className='poll'>\n                <ul>\n                  {currentVersion.getIn(['poll', 'options']).map(option => (\n                    <li key={option.get('title')}>\n                      <span className='poll__input disabled' />\n\n                      <span\n                        className='poll__option__text translate'\n                        dangerouslySetInnerHTML={{ __html: emojify(escapeTextContentForBrowser(option.get('title')), emojiMap) }}\n                      />\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            <MediaAttachments status={currentVersion} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}