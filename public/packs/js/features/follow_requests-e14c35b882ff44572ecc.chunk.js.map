{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/follow_requests/components/account_authorize.js","webpack:///./app/javascript/mastodon/features/follow_requests/containers/account_authorize_container.js","webpack:///./app/javascript/mastodon/features/follow_requests/index.js"],"names":["messages","defineMessages","authorize","reject","AccountAuthorize","injectIntl","ImmutablePureComponent","render","intl","account","onAuthorize","onReject","this","props","content","__html","get","className","Link","to","size","dangerouslySetInnerHTML","title","formatMessage","icon","onClick","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","func","object","connect","getAccount","makeGetAccount","state","id","dispatch","authorizeFollowRequest","rejectFollowRequest","heading","FollowRequests","accountIds","getIn","isLoading","hasMore","locked","me","domain","handleLoadMore","expandFollowRequests","leading","componentWillMount","fetchFollowRequests","multiColumn","emptyMessage","defaultMessage","unlockedPrependMessage","values","bindToDocument","scrollKey","onLoadMore","prepend","Helmet","name","params","bool","list","string"],"mappings":"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","file":"js/features/follow_requests-e14c35b882ff44572ecc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { Link } from 'react-router-dom';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass AccountAuthorize extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, account, onAuthorize, onReject } = this.props;\n    const content = { __html: account.get('note_emojified') };\n\n    return (\n      <div className='account-authorize__wrapper'>\n        <div className='account-authorize'>\n          <Link to={`/@${account.get('acct')}`} className='detailed-status__display-name'>\n            <div className='account-authorize__avatar'><Avatar account={account} size={48} /></div>\n            <DisplayName account={account} />\n          </Link>\n\n          <div className='account__header__content translate' dangerouslySetInnerHTML={content} />\n        </div>\n\n        <div className='account--panel'>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} /></div>\n          <div className='account--panel__button'><IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} /></div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport AccountAuthorize from '../components/account_authorize';\nimport { authorizeFollowRequest, rejectFollowRequest } from '../../../actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AccountAuthorize);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport AccountAuthorizeContainer from './containers/account_authorize_container';\nimport { fetchFollowRequests, expandFollowRequests } from '../../actions/accounts';\nimport ScrollableList from '../../components/scrollable_list';\nimport { me } from '../../initial_state';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.follow_requests', defaultMessage: 'Follow requests' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'follow_requests', 'items']),\n  isLoading: state.getIn(['user_lists', 'follow_requests', 'isLoading'], true),\n  hasMore: !!state.getIn(['user_lists', 'follow_requests', 'next']),\n  locked: !!state.getIn(['accounts', me, 'locked']),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass FollowRequests extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list,\n    locked: PropTypes.bool,\n    domain: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFollowRequests());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowRequests());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, locked, domain, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.follow_requests' defaultMessage=\"You don't have any follow requests yet. When you receive one, it will show up here.\" />;\n    const unlockedPrependMessage = locked ? null : (\n      <div className='follow_requests-unlocked_explanation'>\n        <FormattedMessage\n          id='follow_requests.unlocked_explanation'\n          defaultMessage='Even though your account is not locked, the {domain} staff thought you might want to review follow requests from these accounts manually.'\n          values={{ domain: domain }}\n        />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='user-plus' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='follow_requests'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          prepend={unlockedPrependMessage}\n        >\n          {accountIds.map(id =>\n            <AccountAuthorizeContainer key={id} id={id} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}