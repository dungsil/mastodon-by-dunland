{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/bookmarked_statuses/index.js"],"names":["messages","defineMessages","heading","Bookmarks","connect","state","statusIds","getIn","isLoading","hasMore","injectIntl","ImmutablePureComponent","handlePin","columnId","dispatch","this","props","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","expandBookmarkedStatuses","leading","componentWillMount","fetchBookmarkedStatuses","render","intl","multiColumn","pinned","emptyMessage","id","defaultMessage","bindToDocument","ref","label","formatMessage","icon","title","onPin","onMove","onClick","showBackButton","trackScroll","scrollKey","onLoadMore","name","content","propTypes","PropTypes","func","isRequired","ImmutablePropTypes","list","object","string","bool"],"mappings":"sSAcA,MAAMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,oDAON,IAIGC,EAFUC,mBANQC,IAAK,CAC3BC,UAAWD,EAAME,MAAM,CAAC,eAAgB,YAAa,UACrDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,YAAa,cAAc,GACnEE,UAAWJ,EAAME,MAAM,CAAC,eAAgB,YAAa,YAGf,GACvCG,cAAU,EADI,cAESC,IAAwB,cAAD,yBAgB7CC,UAAY,KACV,MAAM,SAAEC,EAAQ,SAAEC,GAAaC,KAAKC,MAGlCF,EADED,EACOI,YAAaJ,GAEbK,YAAU,YAAa,MAEnC,KAEDC,WAAcC,IACZ,MAAM,SAAEP,EAAQ,SAAEC,GAAaC,KAAKC,MACpCF,EAASO,YAAWR,EAAUO,KAC/B,KAEDE,kBAAoB,KAClBP,KAAKQ,OAAOC,aACb,KAEDC,OAASC,IACPX,KAAKQ,OAASG,GACf,KAEDC,eAAiB,KAAS,KACxBZ,KAAKC,MAAMF,SAASc,iBACnB,IAAK,CAAEC,SAAS,IA7BnBC,qBACEf,KAAKC,MAAMF,SAASiB,eA8BtBC,SACE,MAAM,KAAEC,EAAI,UAAE3B,EAAS,SAAEO,EAAQ,YAAEqB,EAAW,QAAEzB,EAAO,UAAED,GAAcO,KAAKC,MACtEmB,IAAWtB,EAEXuB,EAAe,YAAC,IAAgB,CAACC,GAAG,mCAAmCC,eAAe,0FAE5F,OACE,kBAAC,IAAM,CAACC,gBAAiBL,EAAaM,IAAKzB,KAAKU,OAAQgB,MAAOR,EAAKS,cAAc1C,EAASE,UACzF,YAAC,IAAY,CACXyC,KAAK,WACLC,MAAOX,EAAKS,cAAc1C,EAASE,SACnC2C,MAAO9B,KAAKH,UACZkC,OAAQ/B,KAAKI,WACb4B,QAAShC,KAAKO,kBACda,OAAQA,EACRD,YAAaA,EACbc,gBAAc,IAGhB,YAAC,IAAU,CACTC,aAAcd,EACd7B,UAAWA,EACX4C,UAAY,uBAAsBrC,EAClCJ,QAASA,EACTD,UAAWA,EACX2C,WAAYpC,KAAKY,eACjBS,aAAcA,EACdG,gBAAiBL,IAGnB,YAAC,IAAM,UACL,8BAAQD,EAAKS,cAAc1C,EAASE,UACpC,oBAAMkD,KAAK,SAASC,QAAQ,iBAzE7BC,UAAY,CACjBxC,SAAUyC,IAAUC,KAAKC,WACzBnD,UAAWoD,IAAmBC,KAAKF,WACnCxB,KAAMsB,IAAUK,OAAOH,WACvB5C,SAAU0C,IAAUM,OACpB3B,YAAaqB,IAAUO,KACvBrD,QAAS8C,IAAUO,KACnBtD,UAAW+C,IAAUO,MAVd,EAWR","file":"js/features/bookmarked_statuses-02ae35b412d8fad345a3.chunk.js","sourcesContent":["import { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { fetchBookmarkedStatuses, expandBookmarkedStatuses } from 'mastodon/actions/bookmarks';\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport StatusList from 'mastodon/components/status_list';\nimport Column from 'mastodon/features/ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.bookmarks', defaultMessage: 'Bookmarks' },\n});\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'bookmarks', 'items']),\n  isLoading: state.getIn(['status_lists', 'bookmarks', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'bookmarks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Bookmarks extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchBookmarkedStatuses());\n  }\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('BOOKMARKS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandBookmarkedStatuses());\n  }, 300, { leading: true })\n\n  render () {\n    const { intl, statusIds, columnId, multiColumn, hasMore, isLoading } = this.props;\n    const pinned = !!columnId;\n\n    const emptyMessage = <FormattedMessage id='empty_column.bookmarked_statuses' defaultMessage=\"You don't have any bookmarked posts yet. When you bookmark one, it will show up here.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.heading)}>\n        <ColumnHeader\n          icon='bookmark'\n          title={intl.formatMessage(messages.heading)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        />\n\n        <StatusList\n          trackScroll={!pinned}\n          statusIds={statusIds}\n          scrollKey={`bookmarked_statuses-${columnId}`}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.heading)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}