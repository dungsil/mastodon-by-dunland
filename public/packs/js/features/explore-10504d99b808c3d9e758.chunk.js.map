{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/explore/components/story.js","webpack:///./app/javascript/mastodon/features/explore/links.js","webpack:///./app/javascript/mastodon/features/explore/tags.js","webpack:///./app/javascript/mastodon/features/explore/statuses.js","webpack:///./app/javascript/mastodon/features/explore/suggestions.js","webpack:///./app/javascript/mastodon/features/explore/results.js","webpack:///./app/javascript/mastodon/features/explore/index.js"],"names":["Story","React","PureComponent","state","thumbnailLoaded","handleImageLoad","this","setState","render","url","title","publisher","sharedTimes","thumbnail","blurhash","props","className","href","target","rel","width","value","renderer","accountsCountRenderer","Fragment","classNames","hash","src","onLoad","alt","role","Links","connect","links","getIn","isLoading","componentDidMount","dispatch","fetchTrendingLinks","banner","id","defaultMessage","isEmpty","map","link","get","Tags","hashtags","isLoadingHashtags","fetchTrendingHashtags","hashtag","Statuses","statusIds","hasMore","handleLoadMore","expandTrendingStatuses","leading","fetchTrendingStatuses","multiColumn","emptyMessage","trackScroll","scrollKey","onLoadMore","bindToDocument","withCounters","Suggestions","suggestions","fetchSuggestions","suggestion","messages","defineMessages","appendLoadMore","list","size","push","visible","onClick","renderAccounts","results","ImmutableList","item","renderHashtags","renderStatuses","Results","q","injectIntl","type","handleSelectAll","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","handleLoadMoreAccounts","loadMore","handleLoadMoreStatuses","handleLoadMoreHashtags","expandSearch","intl","filteredResults","concat","Helmet","formatMessage","searchResults","Explore","layout","isSearching","showTrends","handleHeaderClick","column","scrollTop","setRef","c","signedIn","context","identity","ref","label","icon","NavLink","exact","to","Switch","Route","path","component","componentParams","name","content","contextTypes","router","PropTypes","object"],"mappings":"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","file":"js/features/explore-10504d99b808c3d9e758.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Blurhash from 'mastodon/components/blurhash';\nimport { accountsCountRenderer } from 'mastodon/components/hashtag';\nimport ShortNumber from 'mastodon/components/short_number';\nimport Skeleton from 'mastodon/components/skeleton';\nimport classNames from 'classnames';\n\nexport default class Story extends React.PureComponent {\n\n  static propTypes = {\n    url: PropTypes.string,\n    title: PropTypes.string,\n    publisher: PropTypes.string,\n    sharedTimes: PropTypes.number,\n    thumbnail: PropTypes.string,\n    blurhash: PropTypes.string,\n  };\n\n  state = {\n    thumbnailLoaded: false,\n  };\n\n  handleImageLoad = () => this.setState({ thumbnailLoaded: true });\n\n  render () {\n    const { url, title, publisher, sharedTimes, thumbnail, blurhash } = this.props;\n\n    const { thumbnailLoaded } = this.state;\n\n    return (\n      <a className='story' href={url} target='blank' rel='noopener'>\n        <div className='story__details'>\n          <div className='story__details__publisher'>{publisher ? publisher : <Skeleton width={50} />}</div>\n          <div className='story__details__title'>{title ? title : <Skeleton />}</div>\n          <div className='story__details__shared'>{typeof sharedTimes === 'number' ? <ShortNumber value={sharedTimes} renderer={accountsCountRenderer} /> : <Skeleton width={100} />}</div>\n        </div>\n\n        <div className='story__thumbnail'>\n          {thumbnail ? (\n            <React.Fragment>\n              <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n              <img src={thumbnail} onLoad={this.handleImageLoad} alt='' role='presentation' />\n            </React.Fragment>\n          ) : <Skeleton />}\n        </div>\n      </a>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Story from './components/story';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingLinks } from 'mastodon/actions/trends';\nimport { FormattedMessage } from 'react-intl';\nimport DismissableBanner from 'mastodon/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Links extends React.PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/links'>\n        <FormattedMessage id='dismissable_banner.explore_links' defaultMessage='These news stories are being talked about by people on this and other servers of the decentralized network right now.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && links.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links'>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : links.map(link => (\n          <Story\n            key={link.get('id')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\nimport { FormattedMessage } from 'react-intl';\nimport DismissableBanner from 'mastodon/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Tags extends React.PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/tags'>\n        <FormattedMessage id='dismissable_banner.explore_tags' defaultMessage='These hashtags are gaining traction among people on this and other servers of the decentralized network right now.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && hashtags.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links'>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusList from 'mastodon/components/status_list';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'mastodon/actions/trends';\nimport { debounce } from 'lodash';\nimport DismissableBanner from 'mastodon/components/dismissable_banner';\n\nconst mapStateToProps = state => ({\n  statusIds: state.getIn(['status_lists', 'trending', 'items']),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nexport default @connect(mapStateToProps)\nclass Statuses extends React.PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true })\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <>\n        <DismissableBanner id='explore/statuses'>\n          <FormattedMessage id='dismissable_banner.explore_statuses' defaultMessage='These posts from this and other servers in the decentralized network are gaining traction on this server right now.' />\n        </DismissableBanner>\n\n        <StatusList\n          trackScroll\n          statusIds={statusIds}\n          scrollKey='explore-statuses'\n          hasMore={hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          withCounters\n        />\n      </>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport AccountCard from 'mastodon/features/directory/components/account_card';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { connect } from 'react-redux';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { FormattedMessage } from 'react-intl';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass Suggestions extends React.PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchSuggestions(true));\n  }\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    if (!isLoading && suggestions.isEmpty()) {\n      return (\n        <div className='explore__suggestions scrollable scrollable--flex'>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__suggestions'>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <AccountCard key={suggestion.get('account')} id={suggestion.get('account')} />\n        ))}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { expandSearch } from 'mastodon/actions/search';\nimport Account from 'mastodon/containers/account_container';\nimport Status from 'mastodon/containers/status_container';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { List as ImmutableList } from 'immutable';\nimport LoadMore from 'mastodon/components/load_more';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for {q}' },\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n  q: state.getIn(['search', 'searchTerm']),\n});\n\nconst appendLoadMore = (id, list, onLoadMore) => {\n  if (list.size >= 5) {\n    return list.push(<LoadMore key={`${id}-load-more`} visible onClick={onLoadMore} />);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = (results, onLoadMore) => appendLoadMore('accounts', results.get('accounts', ImmutableList()).map(item => (\n  <Account key={`account-${item}`} id={item} />\n)), onLoadMore);\n\nconst renderHashtags = (results, onLoadMore) => appendLoadMore('hashtags', results.get('hashtags', ImmutableList()).map(item => (\n  <Hashtag key={`tag-${item.get('name')}`} hashtag={item} />\n)), onLoadMore);\n\nconst renderStatuses = (results, onLoadMore) => appendLoadMore('statuses', results.get('statuses', ImmutableList()).map(item => (\n  <Status key={`status-${item}`} id={item} />\n)), onLoadMore);\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Results extends React.PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    q: PropTypes.string,\n    intl: PropTypes.object,\n  };\n\n  state = {\n    type: 'all',\n  };\n\n  handleSelectAll = () => this.setState({ type: 'all' });\n  handleSelectAccounts = () => this.setState({ type: 'accounts' });\n  handleSelectHashtags = () => this.setState({ type: 'hashtags' });\n  handleSelectStatuses = () => this.setState({ type: 'statuses' });\n  handleLoadMoreAccounts = () => this.loadMore('accounts');\n  handleLoadMoreStatuses = () => this.loadMore('statuses');\n  handleLoadMoreHashtags = () => this.loadMore('hashtags');\n\n  loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  render () {\n    const { intl, isLoading, q, results } = this.props;\n    const { type } = this.state;\n\n    let filteredResults = ImmutableList();\n\n    if (!isLoading) {\n      switch(type) {\n      case 'all':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts), renderHashtags(results, this.handleLoadMoreHashtags), renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      case 'accounts':\n        filteredResults = filteredResults.concat(renderAccounts(results, this.handleLoadMoreAccounts));\n        break;\n      case 'hashtags':\n        filteredResults = filteredResults.concat(renderHashtags(results, this.handleLoadMoreHashtags));\n        break;\n      case 'statuses':\n        filteredResults = filteredResults.concat(renderStatuses(results, this.handleLoadMoreStatuses));\n        break;\n      }\n\n      if (filteredResults.size === 0) {\n        filteredResults = (\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' && 'active'}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' && 'active'}><FormattedMessage id='search_results.accounts' defaultMessage='People' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' && 'active'}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' && 'active'}><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></button>\n        </div>\n\n        <div className='explore__search-results'>\n          {isLoading ? <LoadingIndicator /> : filteredResults}\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title, { q })}</title>\n        </Helmet>\n      </React.Fragment>\n    );\n  }\n\n}\n","import React from 'react';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport Links from './links';\nimport Tags from './tags';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Search from 'mastodon/features/compose/containers/search_container';\nimport SearchResults from './results';\nimport { Helmet } from 'react-helmet';\nimport { showTrends } from 'mastodon/initial_state';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']) || !showTrends,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Explore extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { intl, multiColumn, isSearching } = this.props;\n    const { signedIn } = this.context.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon={isSearching ? 'search' : 'hashtag'}\n          title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n          onClick={this.handleHeaderClick}\n          multiColumn={multiColumn}\n        />\n\n        <div className='explore__search-header'>\n          <Search />\n        </div>\n\n        <div className='scrollable scrollable--flex'>\n          {isSearching ? (\n            <SearchResults />\n          ) : (\n            <React.Fragment>\n              <div className='account__section-headline'>\n                <NavLink exact to='/explore'><FormattedMessage id='explore.trending_statuses' defaultMessage='Posts' /></NavLink>\n                <NavLink exact to='/explore/tags'><FormattedMessage id='explore.trending_tags' defaultMessage='Hashtags' /></NavLink>\n                <NavLink exact to='/explore/links'><FormattedMessage id='explore.trending_links' defaultMessage='News' /></NavLink>\n                {signedIn && <NavLink exact to='/explore/suggestions'><FormattedMessage id='explore.suggested_follows' defaultMessage='For you' /></NavLink>}\n              </div>\n\n              <Switch>\n                <Route path='/explore/tags' component={Tags} />\n                <Route path='/explore/links' component={Links} />\n                <Route path='/explore/suggestions' component={Suggestions} />\n                <Route exact path={['/explore', '/explore/posts', '/search']} component={Statuses} componentParams={{ multiColumn }} />\n              </Switch>\n\n              <Helmet>\n                <title>{intl.formatMessage(messages.title)}</title>\n                <meta name='robots' content={isSearching ? 'noindex' : 'all'} />\n              </Helmet>\n            </React.Fragment>\n          )}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}