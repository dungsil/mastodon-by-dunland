{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/follow_recommendations/components/account.js","webpack:///./app/javascript/mastodon/features/follow_recommendations/index.js"],"names":["messages","defineMessages","follow","unfollow","Account","connect","getAccount","makeGetAccount","state","props","account","id","injectIntl","ImmutablePureComponent","handleFollow","dispatch","this","getIn","unfollowAccount","get","followAccount","render","intl","button","icon","title","formatMessage","active","onClick","className","Link","to","size","split","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","FollowRecommendations","suggestions","isLoading","handleDone","router","context","requestBrowserPermission","permission","changeSetting","saveSettings","history","push","componentDidMount","fetchSuggestions","componentWillUnmount","markAsPartial","viewBox","xlinkHref","defaultMessage","Fragment","suggestion","src","imageGreeting","alt","Helmet","name","content","contextTypes","list","bool"],"mappings":"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","file":"js/features/follow_recommendations-8f45f94671f50748ce47.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport { Link } from 'react-router-dom';\nimport IconButton from 'mastodon/components/icon_button';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { followAccount, unfollowAccount } from 'mastodon/actions/accounts';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst getFirstSentence = str => {\n  const arr = str.split(/(([\\.\\?!]+\\s)|[．。？！\\n•])/);\n\n  return arr[0];\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleFollow = () => {\n    const { account, dispatch } = this.props;\n\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      dispatch(unfollowAccount(account.get('id')));\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  }\n\n  render () {\n    const { account, intl } = this.props;\n\n    let button;\n\n    if (account.getIn(['relationship', 'following'])) {\n      button = <IconButton icon='check' title={intl.formatMessage(messages.unfollow)} active onClick={this.handleFollow} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.follow)} onClick={this.handleFollow} />;\n    }\n\n    return (\n      <div className='account follow-recommendations-account'>\n        <div className='account__wrapper'>\n          <Link className='account__display-name account__display-name--with-note' title={account.get('acct')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n\n            <DisplayName account={account} />\n\n            <div className='account__note'>{getFirstSentence(account.get('note_plain'))}</div>\n          </Link>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { changeSetting, saveSettings } from 'mastodon/actions/settings';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { markAsPartial } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/features/ui/components/column';\nimport Account from './components/account';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\nimport Button from 'mastodon/components/button';\nimport { Helmet } from 'react-helmet';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nexport default @connect(mapStateToProps)\nclass FollowRecommendations extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions } = this.props;\n\n    // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n\n    // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  }\n\n  handleDone = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(requestBrowserPermission((permission) => {\n      if (permission === 'granted') {\n        dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n        dispatch(saveSettings());\n      }\n    }));\n\n    router.history.push('/home');\n  }\n\n  render () {\n    const { suggestions, isLoading } = this.props;\n\n    return (\n      <Column>\n        <div className='scrollable follow-recommendations-container'>\n          <div className='column-title'>\n            <svg viewBox='0 0 79 79' className='logo'>\n              <use xlinkHref='#logo-symbol-icon' />\n            </svg>\n\n            <h3><FormattedMessage id='follow_recommendations.heading' defaultMessage=\"Follow people you'd like to see posts from! Here are some suggestions.\" /></h3>\n            <p><FormattedMessage id='follow_recommendations.lead' defaultMessage=\"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\" /></p>\n          </div>\n\n          {!isLoading && (\n            <React.Fragment>\n              <div className='column-list'>\n                {suggestions.size > 0 ? suggestions.map(suggestion => (\n                  <Account key={suggestion.get('account')} id={suggestion.get('account')} />\n                )) : (\n                  <div className='column-list__empty-message'>\n                    <FormattedMessage id='empty_column.follow_recommendations' defaultMessage='Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.' />\n                  </div>\n                )}\n              </div>\n\n              <div className='column-actions'>\n                <img src={imageGreeting} alt='' className='column-actions__background' />\n                <Button onClick={this.handleDone}><FormattedMessage id='follow_recommendations.done' defaultMessage='Done' /></Button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}