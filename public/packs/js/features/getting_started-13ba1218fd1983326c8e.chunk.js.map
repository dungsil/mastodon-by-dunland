{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/getting_started/index.js"],"names":["messages","defineMessages","home_timeline","notifications","public_timeline","settings_subheading","community_timeline","explore","direct","bookmarks","preferences","follow_requests","favourites","blocks","domain_blocks","mutes","pins","lists","discover","personal","security","menu","GettingStarted","connect","state","myAccount","getIn","me","unreadFollowRequests","ImmutableList","size","dispatch","fetchFollowRequests","injectIntl","ImmutablePureComponent","componentDidMount","this","props","signedIn","context","identity","render","intl","multiColumn","navItems","number","limit","push","text","formatMessage","showTrends","icon","to","get","badge","href","title","className","name","content","contextTypes","router","PropTypes","object","isRequired","propTypes","ImmutablePropTypes","map","bool","func","unreadNotifications"],"mappings":"qTAkBA,MAAMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,0CACbC,cAAc,CAAD,4DACbC,gBAAgB,CAAD,yEACfC,oBAAoB,CAAD,2DACnBC,mBAAmB,CAAD,wEAClBC,QAAQ,CAAD,sDACPC,OAAO,CAAD,6DACNC,UAAU,CAAD,0DACTC,YAAY,CAAD,8DACXC,gBAAgB,CAAD,sEACfC,WAAW,CAAD,4DACVC,OAAO,CAAD,2DACNC,cAAc,CAAD,mEACbC,MAAM,CAAD,wDACLC,KAAK,CAAD,wDACJC,MAAM,CAAD,kDACLC,SAAS,CAAD,wDACRC,SAAS,CAAD,wDACRC,SAAS,CAAD,wDACRC,KAAK,CAAD,iEAoBJ,IAIIC,EAFUC,mBAnBQC,IAAK,CAC3BC,UAAWD,EAAME,MAAM,CAAC,WAAYC,MACpCC,qBAAsBJ,EAAME,MAAM,CAAC,aAAc,kBAAmB,SAAUG,kBAAiBC,SAGtEC,IAAQ,CACjCC,oBAAqB,IAAMD,EAASC,kBAasB,GAC3DC,cAAU,EADI,cAEcC,IAgB3BC,oBACE,MAAM,oBAAEH,GAAwBI,KAAKC,OAC/B,SAAEC,GAAaF,KAAKG,QAAQC,SAE7BF,GAILN,IAGFS,SACE,MAAM,KAAEC,EAAI,UAAEjB,EAAS,YAAEkB,EAAW,qBAAEf,GAAyBQ,KAAKC,OAC9D,SAAEC,GAAaF,KAAKG,QAAQC,SAE5BI,EAAW,GA3CA,IAACC,EAAQC,EAgF1B,OAnCAF,EAASG,KACP,YAAC,IAAgB,CAAuBC,KAAMN,EAAKO,cAAcjD,EAASkB,WAApD,oBAGpBgC,KACFN,EAASG,KACP,YAAC,IAAU,CAAeI,KAAK,UAAUH,KAAMN,EAAKO,cAAcjD,EAASO,SAAU6C,GAAG,YAAxE,YAIpBR,EAASG,KACP,YAAC,IAAU,CAA0BI,KAAK,QAAQH,KAAMN,EAAKO,cAAcjD,EAASM,oBAAqB8C,GAAG,iBAA5F,sBAChB,YAAC,IAAU,CAAuBD,KAAK,QAAQH,KAAMN,EAAKO,cAAcjD,EAASI,iBAAkBgD,GAAG,WAAtF,oBAGdd,IACFM,EAASG,KACP,YAAC,IAAgB,CAAuBC,KAAMN,EAAKO,cAAcjD,EAASmB,WAApD,mBACtB,YAAC,IAAU,CAAYgC,KAAK,OAAOH,KAAMN,EAAKO,cAAcjD,EAASE,eAAgBkD,GAAG,SAAxE,QAChB,YAAC,IAAU,CAAcD,KAAK,KAAKH,KAAMN,EAAKO,cAAcjD,EAASQ,QAAS4C,GAAG,kBAAjE,UAChB,YAAC,IAAU,CAAgBD,KAAK,WAAWH,KAAMN,EAAKO,cAAcjD,EAASS,WAAY2C,GAAG,cAA5E,YAChB,YAAC,IAAU,CAAkBD,KAAK,OAAOH,KAAMN,EAAKO,cAAcjD,EAASY,YAAawC,GAAG,eAA3E,cAChB,YAAC,IAAU,CAAaD,KAAK,UAAUH,KAAMN,EAAKO,cAAcjD,EAASiB,OAAQmC,GAAG,UAApE,WAGd3B,EAAU4B,IAAI,WAAazB,EAAuB,IACpDgB,EAASG,KAAK,YAAC,IAAU,CAAuBI,KAAK,YAAYH,KAAMN,EAAKO,cAAcjD,EAASW,iBAAkB2C,OAvEvGT,EAuE2HjB,EAvEnHkB,EAuEyI,GAtEtJ,IAAXD,OACF,EACSC,GAASD,GAAUC,EAClBA,EAAF,IAEDD,GAiEiKO,GAAG,oBAAzI,oBAGhCR,EAASG,KACP,YAAC,IAAgB,CAAuBC,KAAMN,EAAKO,cAAcjD,EAASK,sBAApD,mBACtB,YAAC,IAAU,CAAmB8C,KAAK,QAAQH,KAAMN,EAAKO,cAAcjD,EAASU,aAAc6C,KAAK,yBAAhF,iBAKlB,YAAC,IAAM,UACHjB,IAAaK,EAAe,YAAC,IAAmB,IAAM,YAAC,IAAY,CAACa,MAAOd,EAAKO,cAAcjD,EAASqB,MAAO8B,KAAK,OAAOR,YAAaA,IAEzI,mBAAKc,UAAU,oDAA6C,EAC1D,mBAAKA,UAAU,iCAA0B,EACtCb,IAGDD,GAAe,mBAAKc,UAAU,gBAEhC,YAAC,IAAU,KAGXd,GAAeO,KAAe,YAAC,IAAe,IAEhD,YAAC,IAAM,UACL,8BAAQR,EAAKO,cAAcjD,EAASqB,OACpC,oBAAMqC,KAAK,SAASC,QAAQ,iBApF7BC,aAAe,CACpBC,OAAQC,IAAUC,OAAOC,WACzBxB,SAAUsB,IAAUC,QACrB,EAEME,UAAY,CACjBvB,KAAMoB,IAAUC,OAAOC,WACvBvC,UAAWyC,IAAmBC,IAC9BxB,YAAamB,IAAUM,KACvBpC,oBAAqB8B,IAAUO,KAAKL,WACpCpC,qBAAsBkC,IAAUjB,OAChCyB,oBAAqBR,IAAUjB,QAdxB,EAeR","file":"js/features/getting_started-13ba1218fd1983326c8e.chunk.js","sourcesContent":["import React from 'react';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me, showTrends } from '../../initial_state';\nimport { fetchFollowRequests } from 'mastodon/actions/accounts';\nimport { List as ImmutableList } from 'immutable';\nimport NavigationContainer from '../compose/containers/navigation_container';\nimport LinkFooter from 'mastodon/features/ui/components/link_footer';\nimport TrendsContainer from './containers/trends_container';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  home_timeline: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n  notifications: { id: 'tabs_bar.notifications', defaultMessage: 'Notifications' },\n  public_timeline: { id: 'navigation_bar.public_timeline', defaultMessage: 'Federated timeline' },\n  settings_subheading: { id: 'column_subheading.settings', defaultMessage: 'Settings' },\n  community_timeline: { id: 'navigation_bar.community_timeline', defaultMessage: 'Local timeline' },\n  explore: { id: 'navigation_bar.explore', defaultMessage: 'Explore' },\n  direct: { id: 'navigation_bar.direct', defaultMessage: 'Direct messages' },\n  bookmarks: { id: 'navigation_bar.bookmarks', defaultMessage: 'Bookmarks' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favourites' },\n  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n  domain_blocks: { id: 'navigation_bar.domain_blocks', defaultMessage: 'Hidden domains' },\n  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned posts' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  discover: { id: 'navigation_bar.discover', defaultMessage: 'Discover' },\n  personal: { id: 'navigation_bar.personal', defaultMessage: 'Personal' },\n  security: { id: 'navigation_bar.security', defaultMessage: 'Security' },\n  menu: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n});\n\nconst mapStateToProps = state => ({\n  myAccount: state.getIn(['accounts', me]),\n  unreadFollowRequests: state.getIn(['user_lists', 'follow_requests', 'items'], ImmutableList()).size,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFollowRequests: () => dispatch(fetchFollowRequests()),\n});\n\nconst badgeDisplay = (number, limit) => {\n  if (number === 0) {\n    return undefined;\n  } else if (limit && number >= limit) {\n    return `${limit}+`;\n  } else {\n    return number;\n  }\n};\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass GettingStarted extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    myAccount: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n    fetchFollowRequests: PropTypes.func.isRequired,\n    unreadFollowRequests: PropTypes.number,\n    unreadNotifications: PropTypes.number,\n  };\n\n  componentDidMount () {\n    const { fetchFollowRequests } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    fetchFollowRequests();\n  }\n\n  render () {\n    const { intl, myAccount, multiColumn, unreadFollowRequests } = this.props;\n    const { signedIn } = this.context.identity;\n\n    const navItems = [];\n\n    navItems.push(\n      <ColumnSubheading key='header-discover' text={intl.formatMessage(messages.discover)} />,\n    );\n\n    if (showTrends) {\n      navItems.push(\n        <ColumnLink key='explore' icon='hashtag' text={intl.formatMessage(messages.explore)} to='/explore' />,\n      );\n    }\n\n    navItems.push(\n      <ColumnLink key='community_timeline' icon='users' text={intl.formatMessage(messages.community_timeline)} to='/public/local' />,\n      <ColumnLink key='public_timeline' icon='globe' text={intl.formatMessage(messages.public_timeline)} to='/public' />,\n    );\n\n    if (signedIn) {\n      navItems.push(\n        <ColumnSubheading key='header-personal' text={intl.formatMessage(messages.personal)} />,\n        <ColumnLink key='home' icon='home' text={intl.formatMessage(messages.home_timeline)} to='/home' />,\n        <ColumnLink key='direct' icon='at' text={intl.formatMessage(messages.direct)} to='/conversations' />,\n        <ColumnLink key='bookmark' icon='bookmark' text={intl.formatMessage(messages.bookmarks)} to='/bookmarks' />,\n        <ColumnLink key='favourites' icon='star' text={intl.formatMessage(messages.favourites)} to='/favourites' />,\n        <ColumnLink key='lists' icon='list-ul' text={intl.formatMessage(messages.lists)} to='/lists' />,\n      );\n\n      if (myAccount.get('locked') || unreadFollowRequests > 0) {\n        navItems.push(<ColumnLink key='follow_requests' icon='user-plus' text={intl.formatMessage(messages.follow_requests)} badge={badgeDisplay(unreadFollowRequests, 40)} to='/follow_requests' />);\n      }\n\n      navItems.push(\n        <ColumnSubheading key='header-settings' text={intl.formatMessage(messages.settings_subheading)} />,\n        <ColumnLink key='preferences' icon='gears' text={intl.formatMessage(messages.preferences)} href='/settings/preferences' />,\n      );\n    }\n\n    return (\n      <Column>\n        {(signedIn && !multiColumn) ? <NavigationContainer /> : <ColumnHeader title={intl.formatMessage(messages.menu)} icon='bars' multiColumn={multiColumn} />}\n\n        <div className='getting-started scrollable scrollable--flex'>\n          <div className='getting-started__wrapper'>\n            {navItems}\n          </div>\n\n          {!multiColumn && <div className='flex-spacer' />}\n\n          <LinkFooter />\n        </div>\n\n        {(multiColumn && showTrends) && <TrendsContainer />}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.menu)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}