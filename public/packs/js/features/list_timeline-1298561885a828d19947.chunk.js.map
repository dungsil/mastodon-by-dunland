{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_timeline/index.js"],"names":["messages","defineMessages","deleteMessage","deleteConfirm","followed","none","list","ListTimeline","connect","state","props","getIn","params","id","hasUnread","injectIntl","React","PureComponent","handlePin","columnId","dispatch","this","removeColumn","addColumn","context","router","history","push","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","c","handleLoadMore","maxId","expandListTimeline","handleEditClick","openModal","listId","handleDeleteClick","intl","message","formatMessage","confirm","onConfirm","deleteList","handleRepliesPolicyChange","target","updateList","undefined","value","componentDidMount","fetchList","disconnect","connectListStream","componentWillReceiveProps","nextProps","componentWillUnmount","render","multiColumn","pinned","title","get","replies_policy","className","bindToDocument","ref","label","icon","active","onPin","onMove","onClick","type","tabIndex","defaultMessage","role","aria-labelledby","map","policy","name","checked","onChange","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","content","contextTypes","PropTypes","object"],"mappings":"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","file":"js/features/list_timeline-1298561885a828d19947.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { fetchList, deleteList, updateList } from 'mastodon/actions/lists';\nimport { openModal } from 'mastodon/actions/modal';\nimport { connectListStream } from 'mastodon/actions/streaming';\nimport { expandListTimeline } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/components/column';\nimport ColumnBackButton from 'mastodon/components/column_back_button';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport Icon from 'mastodon/components/icon';\nimport LoadingIndicator from 'mastodon/components/loading_indicator';\nimport MissingIndicator from 'mastodon/components/missing_indicator';\nimport RadioButton from 'mastodon/components/radio_button';\nimport StatusListContainer from 'mastodon/features/ui/containers/status_list_container';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.context.router.history.push('/');\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  }\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  }\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n\n        if (!!columnId) {\n          dispatch(removeColumn(columnId));\n        } else {\n          this.context.router.history.push('/lists');\n        }\n      },\n    }));\n  }\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, target.value));\n  }\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings__row column-header__links'>\n            <button type='button' className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button type='button' className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n          </div>\n\n          { replies_policy !== undefined && (\n            <div role='group' aria-labelledby={`list-${id}-replies-policy`}>\n              <span id={`list-${id}-replies-policy`} className='column-settings__section'>\n                <FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' />\n              </span>\n              <div className='column-settings__row'>\n                { ['none', 'list', 'followed'].map(policy => (\n                  <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                ))}\n              </div>\n            </div>\n          )}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list post new statuses, they will appear here.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{title}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}