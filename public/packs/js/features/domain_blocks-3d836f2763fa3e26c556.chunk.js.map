{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/domain.js","webpack:///./app/javascript/mastodon/containers/domain_container.js","webpack:///./app/javascript/mastodon/features/domain_blocks/index.js"],"names":["messages","defineMessages","unblockDomain","Account","injectIntl","ImmutablePureComponent","handleDomainUnblock","this","props","onUnblockDomain","domain","render","intl","className","active","icon","title","formatMessage","onClick","propTypes","PropTypes","string","func","isRequired","object","blockDomainConfirm","connect","dispatch","onBlockDomain","openModal","message","id","defaultMessage","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","state","domains","getIn","hasMore","handleLoadMore","expandDomainBlocks","leading","componentWillMount","fetchDomainBlocks","multiColumn","emptyMessage","bindToDocument","scrollKey","onLoadMore","map","Helmet","name","content","params","bool","ImmutablePropTypes","orderedSet"],"mappings":"mRAMA,MAAMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,wEACZ,IAGGC,EADUC,cAAU,EAAX,cACOC,IAAwB,cAAD,yBAQ3CC,oBAAsB,KACpBC,KAAKC,MAAMC,gBAAgBF,KAAKC,MAAME,SAGxCC,SACE,MAAM,OAAED,EAAM,KAAEE,GAASL,KAAKC,MAE9B,OACE,mBAAKK,UAAU,eAAQ,EACrB,mBAAKA,UAAU,wBAAiB,EAC9B,oBAAMA,UAAU,4BAAqB,EACnC,+BAASH,IAGX,mBAAKG,UAAU,wBAAiB,EAC9B,YAAC,IAAU,CAACC,QAAM,EAACC,KAAK,SAASC,MAAOJ,EAAKK,cAAcjB,EAASE,cAAe,CAAEQ,WAAWQ,QAASX,KAAKD,4BArBjHa,UAAY,CACjBT,OAAQU,IAAUC,OAClBZ,gBAAiBW,IAAUE,KAAKC,WAChCX,KAAMQ,IAAUI,OAAOD,YAND,EAOvB,O,YCVH,MAAMvB,EAAWC,YAAe,CAC9BwB,mBAAmB,CAAD,gFAuBLrB,I,IAAAA,cAAWsB,mBApBE,IACF,WAKC,CAACC,EAAS,KAAD,IAAE,KAAEf,GAAM,QAAM,CAClDgB,cAAelB,GACbiB,EAASE,YAAU,UAAW,CAC5BC,QAAS,YAAC,IAAgB,CAACC,GAAG,qCAAqCC,eAAe,iJAAiJC,OAAQ,CAAEvB,OAAQ,+BAASA,MAC9PwB,QAAStB,EAAKK,cAAcjB,EAASyB,oBACrCU,UAAW,IAAMR,EAASS,YAAY1B,QAI1CD,gBAAiBC,GACfiB,EAASzB,YAAcQ,QAIDgB,CAAiDW,I,iBChB3E,MAAMrC,EAAWC,YAAe,CAC9BqC,QAAQ,CAAD,4DACPpC,cAAc,CAAD,wEAMZ,IAIGqC,EAFUb,mBALQc,IAAK,CAC3BC,QAASD,EAAME,MAAM,CAAC,eAAgB,SAAU,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,SAAU,YAGZ,GACvCtC,cAAU,EADI,cAEMC,IAAwB,cAAD,yBAe1CuC,eAAiB,KAAS,KACxBrC,KAAKC,MAAMmB,SAASkB,iBACnB,IAAK,CAAEC,SAAS,IANnBC,qBACExC,KAAKC,MAAMmB,SAASqB,eAOtBrC,SACE,MAAM,KAAEC,EAAI,QAAE6B,EAAO,QAAEE,EAAO,YAAEM,GAAgB1C,KAAKC,MAErD,IAAKiC,EACH,OACE,YAAC,IAAM,UACL,YAAC,IAAgB,KAKvB,MAAMS,EAAe,YAAC,IAAgB,CAACnB,GAAG,6BAA6BC,eAAe,sCAEtF,OACE,YAAC,IAAM,CAACmB,gBAAiBF,EAAalC,KAAK,eAAeuB,QAAS1B,EAAKK,cAAcjB,EAASsC,eAAS,EACtG,YAAC,IAAoB,IAErB,YAAC,IAAc,CACbc,UAAU,gBACVC,WAAY9C,KAAKqC,eACjBD,QAASA,EACTO,aAAcA,EACdC,gBAAiBF,QAAY,EAE5BR,EAAQa,KAAI5C,GACX,YAAC,EAAe,CAAcA,OAAQA,GAAhBA,MAI1B,YAAC6C,EAAA,EAAM,UACL,oBAAMC,KAAK,SAASC,QAAQ,iBA/C7BtC,UAAY,CACjBuC,OAAQtC,IAAUI,OAAOD,WACzBI,SAAUP,IAAUE,KAAKC,WACzBoB,QAASvB,IAAUuC,KACnBlB,QAASmB,IAAmBC,WAC5BjD,KAAMQ,IAAUI,OAAOD,WACvB0B,YAAa7B,IAAUuC,MAThB,EAUR","file":"js/features/domain_blocks-3d836f2763fa3e26c556.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}