{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_adder/components/list.js","webpack:///./app/javascript/mastodon/features/list_adder/components/account.js","webpack:///./app/javascript/mastodon/features/list_adder/index.js"],"names":["messages","defineMessages","remove","add","List","connect","state","listId","added","list","get","getIn","includes","dispatch","onRemove","removeFromListAdder","onAdd","addToListAdder","injectIntl","ImmutablePureComponent","render","intl","this","props","button","icon","title","formatMessage","onClick","className","id","fixedWidth","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","bool","defaultProps","Account","getAccount","makeGetAccount","accountId","account","size","getOrderedLists","createSelector","lists","toList","filter","item","sort","a","b","localeCompare","ListAdder","listIds","onInitialize","setupListAdder","onReset","resetListAdder","componentDidMount","componentWillUnmount","ListId","string","onClose"],"mappings":"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","file":"js/features/list_adder-9d371364461585ca47d2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { removeFromListAdder, addToListAdder } from '../../../actions/lists';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst MapStateToProps = (state, { listId, added }) => ({\n  list: state.get('lists').get(listId),\n  added: typeof added === 'undefined' ? state.getIn(['listAdder', 'lists', 'items']).includes(listId) : added,\n});\n\nconst mapDispatchToProps = (dispatch, { listId }) => ({\n  onRemove: () => dispatch(removeFromListAdder(listId)),\n  onAdd: () => dispatch(addToListAdder(listId)),\n});\n\nexport default @connect(MapStateToProps, mapDispatchToProps)\n@injectIntl\nclass List extends ImmutablePureComponent {\n\n  static propTypes = {\n    list: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render () {\n    const { list, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='list'>\n        <div className='list__wrapper'>\n          <div className='list__display-name'>\n            <Icon id='list-ul' className='column-link__icon' fixedWidth />\n            {list.get('title')}\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport { injectIntl } from 'react-intl';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n  };\n\n  render () {\n    const { account } = this.props;\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl } from 'react-intl';\nimport { setupListAdder, resetListAdder } from '../../actions/lists';\nimport { createSelector } from 'reselect';\nimport List from './components/list';\nimport Account from './components/account';\nimport NewListForm from '../lists/components/new_list_form';\n// hack\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  listIds: getOrderedLists(state).map(list=>list.get('id')),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: accountId => dispatch(setupListAdder(accountId)),\n  onReset: () => dispatch(resetListAdder()),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListAdder extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    listIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, accountId } = this.props;\n    onInitialize(accountId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountId, listIds } = this.props;\n\n    return (\n      <div className='modal-root__modal list-adder'>\n        <div className='list-adder__account'>\n          <Account accountId={accountId} />\n        </div>\n\n        <NewListForm />\n\n\n        <div className='list-adder__lists'>\n          {listIds.map(ListId => <List key={ListId} listId={ListId} />)}\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}