{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/notifications/components/report.js","webpack:///./app/javascript/mastodon/features/notifications/components/follow_request.js","webpack:///./app/javascript/mastodon/features/notifications/containers/follow_request_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/notification.js","webpack:///./app/javascript/mastodon/features/notifications/containers/notification_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/clear_column_button.js","webpack:///./app/javascript/mastodon/features/notifications/components/grant_permission_button.js","webpack:///./app/javascript/mastodon/features/notifications/components/column_settings.js","webpack:///./app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/filter_bar.js","webpack:///./app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///./app/javascript/mastodon/features/notifications/components/notifications_permission_banner.js","webpack:///./app/javascript/mastodon/features/notifications/index.js"],"names":["messages","defineMessages","openReport","other","spam","violation","Report","injectIntl","ImmutablePureComponent","render","intl","hidden","report","account","this","props","get","className","friend","timestamp","short","id","defaultMessage","values","count","size","formatMessage","href","target","rel","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","bool","object","authorize","reject","FollowRequest","onAuthorize","onReject","Link","title","to","icon","onClick","func","connect","getAccount","makeGetAccount","state","dispatch","authorizeFollowRequest","rejectFollowRequest","favourite","follow","ownPoll","poll","reblog","status","update","adminSignUp","adminReport","notificationForScreenReader","message","output","push","formatDate","hour","minute","month","day","join","Notification","handleMoveUp","notification","onMoveUp","handleMoveDown","onMoveDown","handleOpen","context","router","history","getIn","handleOpenProfile","handleMention","e","preventDefault","onMention","handleHotkeyFavourite","onFavourite","handleHotkeyBoost","onReblog","handleHotkeyToggleHidden","onToggleHidden","getHandlers","reply","boost","mention","open","openProfile","moveUp","moveDown","toggleHidden","renderFollow","link","unread","handlers","classNames","tabIndex","aria-label","name","fixedWidth","renderFollowRequest","withNote","renderMention","withDismiss","contextType","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderFavourite","muted","renderReblog","renderStatus","renderUpdate","renderPoll","me","renderAdminSignUp","renderAdminReport","targetAccount","targetDisplayNameHtml","__html","targetLink","dangerouslySetInnerHTML","displayNameHtml","contextTypes","number","getNotification","makeGetNotification","getStatus","makeGetStatus","getReport","makeGetReport","accountId","mentionCompose","onModalReblog","privacy","unreblog","shiftKey","boostModal","initBoostModal","unfavourite","revealStatus","hideStatus","ClearColumnButton","React","PureComponent","GrantPermissionButton","ColumnSettings","onPushChange","path","checked","onChange","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","role","aria-labelledby","prefix","settingPath","label","disabled","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","clearMessage","clearConfirm","permissionDenied","includes","window","permission","requestBrowserPermission","changePushNotifications","slice","showAlert","undefined","changeSetting","setFilter","openModal","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","close","NotificationsPermissionBanner","handleClick","handleClose","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","filter","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","isLoading","isUnread","hasMore","numPending","lastReadId","canMarkAsRead","some","compareId","needsNotificationPermission","handleLoadGap","maxId","expandNotifications","handleLoadOlder","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","componentWillMount","mountNotifications","componentWillUnmount","cancel","unmountNotifications","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","multiColumn","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","scrollContainer","scrollKey","trackScroll","showLoading","prepend","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","extraButton","ref","active","onPin","onMove","Helmet","content","defaultProps"],"mappings":"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","file":"js/features/notifications-a005ed80dee08f73bfd9.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport AvatarOverlay from 'mastodon/components/avatar_overlay';\nimport RelativeTimestamp from 'mastodon/components/relative_timestamp';\n\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nexport default @injectIntl\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {report.get('id')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {{count} post} other {{count} posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'mastodon/components/avatar';\nimport DisplayName from 'mastodon/components/display_name';\nimport { Link } from 'react-router-dom';\nimport IconButton from 'mastodon/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Link key={account.get('id')} className='account__display-name' title={account.get('acct')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </Link>\n\n          <div className='account__relationship'>\n            <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n            <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'mastodon/actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FollowRequest);\n","import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport { HotKeys } from 'react-hotkeys';\nimport PropTypes from 'prop-types';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me } from 'mastodon/initial_state';\nimport StatusContainer from 'mastodon/containers/status_container';\nimport AccountContainer from 'mastodon/containers/account_container';\nimport Report from './report';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'mastodon/components/icon';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  favourite: { id: 'notification.favourite', defaultMessage: '{name} favourited your status' },\n  follow: { id: 'notification.follow', defaultMessage: '{name} followed you' },\n  ownPoll: { id: 'notification.own_poll', defaultMessage: 'Your poll has ended' },\n  poll: { id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' },\n  reblog: { id: 'notification.reblog', defaultMessage: '{name} boosted your status' },\n  status: { id: 'notification.status', defaultMessage: '{name} just posted' },\n  update: { id: 'notification.update', defaultMessage: '{name} edited a post' },\n  adminSignUp: { id: 'notification.admin.sign_up', defaultMessage: '{name} signed up' },\n  adminReport: { id: 'notification.admin.report', defaultMessage: '{name} reported {target}' },\n});\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/@${notification.getIn(['status', 'account', 'acct'])}/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  }\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  }\n\n  getHandlers () {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.follow, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n        unread={this.props.unread}\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-favourite focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.favourite, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='star' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-reblog focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.reblog, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderStatus (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-status focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.status, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='home' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.status' defaultMessage='{name} just posted' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderUpdate (notification, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-update focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.update, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='pencil' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.update' defaultMessage='{name} edited a post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll (notification, account) {\n    const { intl, unread } = this.props;\n    const ownPoll  = me === account.get('id');\n    const message  = ownPoll ? intl.formatMessage(messages.ownPoll) : intl.formatMessage(messages.poll);\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-poll focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, message, notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              {ownPoll ? (\n                <FormattedMessage id='notification.own_poll' defaultMessage='Your poll has ended' />\n              ) : (\n                <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n              )}\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={account}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminSignUp (notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminSignUp, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.sign_up' defaultMessage='{name} signed up' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderAdminReport (notification, account, link) {\n    const { intl, unread, report } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Link className='notification__display-name' title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage(messages.adminReport, { name: account.get('acct'), target: notification.getIn(['report', 'target_account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Link className='notification__display-name' href={`/@${account.get('acct')}`} title={account.get('acct')} to={`/@${account.get('acct')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'status':\n      return this.renderStatus(notification, link);\n    case 'update':\n      return this.renderUpdate(notification, link);\n    case 'poll':\n      return this.renderPoll(notification, account);\n    case 'admin.sign_up':\n      return this.renderAdminSignUp(notification, account, link);\n    case 'admin.report':\n      return this.renderAdminReport(notification, account, link);\n    }\n\n    return null;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetNotification, makeGetStatus, makeGetReport } from '../../../selectors';\nimport Notification from '../components/notification';\nimport { initBoostModal } from '../../../actions/boosts';\nimport { mentionCompose } from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n} from '../../../actions/interactions';\nimport {\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { boostModal } from '../../../initial_state';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n  const getStatus = makeGetStatus();\n  const getReport = makeGetReport();\n\n  const mapStateToProps = (state, props) => {\n    const notification = getNotification(state, props.notification, props.accountId);\n    return {\n      notification: notification,\n      status: notification.get('status') ? getStatus(state, { id: notification.get('status') }) : null,\n      report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onModalReblog (status, privacy) {\n    dispatch(reblog(status, privacy));\n  },\n\n  onReblog (status, e) {\n    if (status.get('reblogged')) {\n      dispatch(unreblog(status));\n    } else {\n      if (e.shiftKey || !boostModal) {\n        this.onModalReblog(status);\n      } else {\n        dispatch(initBoostModal({ status, onReblog: this.onModalReblog }));\n      }\n    }\n  },\n\n  onFavourite (status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex='0' onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport SettingToggle from './setting_toggle';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'mastodon/permissions';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  }\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications, requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\nimport { showAlert } from '../../../actions/alerts';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'mastodon/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport Icon from 'mastodon/components/icon';\nimport Button from 'mastodon/components/button';\nimport IconButton from 'mastodon/components/icon_button';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport default @connect()\n@injectIntl\nclass NotificationsPermissionBanner extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  }\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from '../../actions/notifications';\nimport { submitMarkers } from '../../actions/markers';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport Icon from 'mastodon/components/icon';\nimport compareId from 'mastodon/compare_id';\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport NotSignedInIndicator from 'mastodon/components/not_signed_in_indicator';\nimport { Helmet } from 'react-helmet';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  componentWillMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.context.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    let extraButton = null;\n\n    if (canMarkAsRead) {\n      extraButton = (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          extraButton={extraButton}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}